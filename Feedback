Suggestions:
Feedback:


Michael Mullarkey: I know it's a huge ask, but something like a "Rosetta Stone" for task difficulty would be really nice going both directions. For example, this kind comp task is as hard as writing an abstract, vs. as hard as writing a paper, vs. as hard as writing a major grant, etc.

Michael Mullarkey: Helping make sure folks can get on the same page re: feasibility/timelines for different projects (in both directions!) can make all the difference in the world.

Alastair Kilpatrick: dark coulds in sad cartoons :P

Florian Markowetz:
90% of comp work is data wrangling, so I would definitely let them experience that and the tidy data idea


Bordy Foy: From a computational side (my area), I'd include content on understanding the difference between the 'computational problem' and the 'applied problem'. So much conversation in these collabs goes past each other, as you are both focusing on different problems


Brody Foy: Also, on communicating inherent uncertainty of modelling work. Building a math model is such an inherently hard process to time gauge. Conveying that uncertainty to experimentally-focused researchers is very hard.

Sarah Optiz: Communication between computational/non-computational team members: language/terminology and navigating how to get there together

luispedrocoelho:

Lecture 4: "You (probably) don't need a supercomputer"
...
Lecture 7: "Open source licensing. Copyright & Copyleft"
...
Lecture 11: "Big-Oh, big-shmoh. Intuitions on what can be scaled up"
...
Lecture 15: "Machine learning is not magic"

Lecture 17: "It'll take longer than you think"
...
Lecture 19: "What do you mean, it's not reproducible?
...
Lecture 23: (final) "Learn to code. Maybe."

Anne Carpenter: The differences in publishing venues and how to assess the reputation of computational conferences.
